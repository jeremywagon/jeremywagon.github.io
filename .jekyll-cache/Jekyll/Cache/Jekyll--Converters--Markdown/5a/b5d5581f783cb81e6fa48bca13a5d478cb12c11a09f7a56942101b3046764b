I"3<h2 id="컴포넌트-메소드">컴포넌트 메소드</h2>

<p>컴포넌트에 메소드를 추가하여 이벤트 헨들러로 등록할 수 있다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">컴포넌트</span> <span class="nx">메소드</span><span class="si">}</span><span class="p">&gt;</span>버튼<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>

</code></pre></div></div>

<h2 id="클래스형-컴포넌트에서-메소드-추가하기---1">클래스형 컴포넌트에서 메소드 추가하기 - 1</h2>

<p>클래스형 컴포넌트에서 메소드를 추가하기 위해서는 <code class="language-plaintext highlighter-rouge">bind()</code> 작업이 필요하다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// bind 작업</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>클래스형 컴포넌트에서 <code class="language-plaintext highlighter-rouge">bind()</code> 작업을 하는 이유는 <code class="language-plaintext highlighter-rouge">this</code>가 정상적으로 컴포넌트를 가리키도록 하기 위해서다.</p>

<p><code class="language-plaintext highlighter-rouge">constructor</code> 내부에서 이루어진다.</p>

<p>새로운 메소드를 추가할 때마다 <code class="language-plaintext highlighter-rouge">constructor</code>도 수정해야 하는 불편함이 있다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example</span>

<span class="c1">// import 생략</span>

<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// bind 작업</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// method 추가</span>
    <span class="c1">// 자바스크립트 클래스 문법</span>
    <span class="nx">handleClick</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// code here</span>
    <span class="p">}</span>    
<span class="p">}</span> 

</code></pre></div></div>

<h2 id="클래스형-컴포넌트에서-메소드-추가하기---2">클래스형 컴포넌트에서 메소드 추가하기 - 2</h2>

<p><code class="language-plaintext highlighter-rouge">bind()</code> 작업을 생략할 수 있는 방법이 있다.</p>

<h3 id="property-initializer-syntax">Property Initializer Syntax</h3>

<p>babel 플러그인인 transform-class-properties을 이용하여 클래스 내부에 화살표 함수 형태로 메소드를 추가할 수 있다.</p>

<p><a href="https://www.npmjs.com/package/babel-plugin-transform-class-properties#example" target="_blank">예시: transform-class-properties</a></p>

<p>React에는 해당 플러그인이 내장되어 있어 위 문법을 바로 사용가능 한 것 같다.</p>

<p>이를 이용하면 <code class="language-plaintext highlighter-rouge">bind()</code>작업과 <code class="language-plaintext highlighter-rouge">constructor</code> 수정도 필요 없다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example</span>
<span class="kd">class</span> <span class="nx">MyComponent</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>


    <span class="c1">// method 추가</span>
    <span class="c1">// Property Initializer Syntax</span>
    <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// code here</span>
        <span class="c1">// arrow function 내부에서 this는 컴포넌트를 가리킨다.</span>
    <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div></div>

<h2 id="함수형-컴포넌트에서-메소드-추가하기">함수형 컴포넌트에서 메소드 추가하기</h2>

<p>컴포넌트 함수 코드 블록 안에서 변수에 함수객체를 할당하면 된다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example</span>

<span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    
    <span class="c1">// 메소드 추가</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET